name: Deploy to GitHub Pages

on:
  push:
    branches: ["main", "gh-pages"]

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # - name: Determine version bump type
      #   id: version_bump
      #   run: |
      #     COMMIT_MSG="${{ github.event.head_commit.message }}"
      #     echo "Commit message: $COMMIT_MSG"

      #     # Convert to lowercase for case-insensitive matching
      #     COMMIT_LOWER=$(echo "$COMMIT_MSG" | tr '[:upper:]' '[:lower:]')

      #     # Remove scope from commit message (e.g., "feat(router): message" -> "feat: message")
      #     COMMIT_PREFIX=$(echo "$COMMIT_LOWER" | sed 's/([^)]*)//' | cut -d':' -f1 | xargs)

      #     # Determine bump type
      #     if [[ "$COMMIT_LOWER" =~ ^major:|^\[major\]|^breaking\ change:|^\[breaking\ change\] ]]; then
      #       echo "bump_type=major" >> $GITHUB_OUTPUT
      #     elif [[ "$COMMIT_PREFIX" =~ ^(chore|feat|feature|build|ci|test|perf|performance|refactor|revert|style)$ ]]; then
      #       echo "bump_type=minor" >> $GITHUB_OUTPUT
      #     else
      #       echo "bump_type=patch" >> $GITHUB_OUTPUT
      #     fi

      #     echo "Determined bump type: $(cat $GITHUB_OUTPUT | grep bump_type | cut -d'=' -f2)"

      # - name: Update package.json version
      #   id: update_version
      #   run: |
      #     CURRENT_VERSION=$(node -p "require('./package.json').version")
      #     echo "Current version: $CURRENT_VERSION"

      #     IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

      #     case "${{ steps.version_bump.outputs.bump_type }}" in
      #       major)
      #         MAJOR=$((MAJOR + 1))
      #         MINOR=0
      #         PATCH=0
      #         ;;
      #       minor)
      #         MINOR=$((MINOR + 1))
      #         PATCH=0
      #         ;;
      #       patch)
      #         PATCH=$((PATCH + 1))
      #         ;;
      #     esac

      #     NEW_VERSION="$MAJOR.$MINOR.$PATCH"
      #     echo "New version: $NEW_VERSION"
      #     echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      #     # Update package.json
      #     npm version $NEW_VERSION --no-git-tag-version

      #     echo "Updated package.json to version $NEW_VERSION"

      - name: Build
        run: |
          echo "VITE_BUILD_TIME=$(date +%s)" >> $GITHUB_ENV
          npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # - name: Commit version update
      #   if: success()
      #   run: |
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"
      #     git add package.json
      #     git commit -m "chore: bump version to ${{ steps.update_version.outputs.new_version }} [skip ci]"
      #     git push
